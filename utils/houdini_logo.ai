%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 23.0.1%%For: (Junichiro Horikawa) ()%%Title: (logo.ai)%%CreationDate: 2019/01/10 9:46%%Canvassize: 16383%%BoundingBox: 225 274 438 487%%HiResBoundingBox: 225.8554 274.9804 437.342 486.3261%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 363.5 362.1693 363.5 362.1693%AI3_TileBox: 116.8819 10.5827 608.7874 715.0866%AI3_DocumentPreview: None%AI5_ArtSize: 725.6693 725.6693%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -28.8109 691.6552 0.988624 1518 831 26 0 0 43 101 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 8070 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C4527FD7E522727FD7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD%7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD%7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD%7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD7EFF5252FD7EFF5227FD%1FFFA8FFA8FD0E7DFD4EFF5252FD1AFFA8A87D52527D5252FD0E7D527D52%7D7DA8A8FD47FF5227FD16FFA8527D5252527DA8FFA8FD11FFA8FFA87D52%52277D7DA8FD43FF5252FD13FFA87D52527DA8FD1FFF7D7D525252A8FD40%FF5227FD10FFA85252527DA8FD25FFA87D52527DA8FD3DFF5252FD0EFF7D%5252A8A8FD2BFFA87D527D7DFD3BFF5252FD0BFFA852277DA8FD31FF7D7D%2752A8FD38FF5252FD09FFA852527DFD37FF7D5252FD37FF5252FD07FFA8%7D277DFD3BFF7D2752A8FD34FF5252FD06FF52527DFD3FFF7D527DFD33FF%5252FFFFFFA87D277DFD42FFA87D277DFD31FF5252FFFF7D527DFD47FF52%52FD30FF52527D277DA8FD49FF7D277DFD2EFF522752FD1FFFA8FF7D7D52%7D5252527D527D52FD047DFD1EFF5252FD2DFF5252FD1BFF7D7DFD05527D%7DA8A8FFA8A8A8FFA8A8FD047D5252527DA8FD1AFF7D27A8FD2BFF5252FD%17FFA87D52527D7DA8A8FD13FFA8A87D52527DA8FD19FF277DFD2AFF5252%FD14FFA85252527D7DFD1DFF7D52277DA8FD17FF2752A8FD28FF5252FD12%FF7D52527DA8FD23FF52527DFD17FF7D52A8FD27FF5252FD10FFA82752A8%FD27FFA87D277DFD16FF7D27A8FD26FF5252FD0EFF7D5252FD2DFF52527D%FD15FF7D27A8FD25FF5252FD0CFF7D277DA8FD2FFFA85227FD15FF7D27A8%FD24FF5252FD0AFFA85252FD34FFA827A8FD14FFA852FD24FF5252FD09FF%5252A8FD37FF277DFD14FF7D52A8FD22FF5252FD07FFA8277DFD3AFF527D%FD14FF7D52FD22FF5252FD06FF7D27FD19FFA8A87DA87D7D7DA87DA8A8FD%19FF5252A8FD13FF7D52FD21FF5252FD05FF5252FD15FF7D7D527D525252%FD077D527D5252527DA8FD15FF7D52FD14FF7D7DFD20FF5252FFFFFFA852%7DFD13FFA87D277D7DA8A8FD0DFFA8A85252527D7DFD13FF7D52FD14FF27%7DFD1FFF5252FFFFA8527DFD11FFA87D52527DFD17FF7D52527D7DFD11FF%5252FD14FF27FD1FFF5252FF5252A8FD11FF525252A8FD1CFF7D7D277DA8%FD0FFF527DFD13FFA852FD1EFF5252527DFD11FF7D277DFD22FF7D527DFD%0FFF52A8FD13FF527DFD1DFF52277DFD10FFA85252FD25FFA87D277DFD0E%FF27A8FD13FF27A8FD1CFF5252FD10FF7D52A8FD29FF5252A8FD0CFFA827%FD13FFA852FD1CFF5252FD0EFFA82752FD2CFF7D277DFD0CFF7D52FD13FF%527DFD1BFF5252FD0DFF7D27A8FD2EFFA8527DFD0CFF52A8FD13FF27FD1B%FF5252FD0CFF5252FD32FF5252FD0BFFA852A8FD12FF7D52FD1AFF5252FD%0AFFA8527DFD34FF7D52FD0BFF7D7DFD12FFA852FD1AFF5252FD09FF7D27%A8FD36FF527DFD0BFF27A8FD12FF527DFD19FF5252FD08FF7D52FD39FF52%7DFD0AFFA852FD13FF27FD19FF5252FD07FF7D52FD3AFFA827A8FD0AFF52%A8FD12FF7D7DFD18FF5252FD06FF7D52FD3CFFA852A8FD09FF7D7DFD12FF%A852FD18FF5252FD05FF7D27A8FD3DFF7D52FD0AFF27FD13FF52A8FD17FF%5252FD04FFA852A8FD1FFFA8FFA8A87DFD04A8FD17FF27FD0AFF7D7DFD12%FFA852FD17FF5252FFFFFFA852A8FD1BFFA87DFD05527D527D527D525252%FD16FF7D52FD09FF7D52FD13FF52A8FD16FF5252FFFFFF52A8FD19FFA87D%52527DA8A8FD0AFF7D277DA8FD14FF52A8FD09FF52FD13FF52A8FD16FF52%52FFFF527DFD17FFA87D27527DFD11FF7D277DFD13FF7D7DFD09FF7D7DFD%12FF7D52FD16FF5252FF7D52FD17FF525252FD16FF527DFD13FF27FD09FF%7D7DFD12FFA87DFD16FF5252A827FD16FF7D277DA8FD17FFA8277DFD12FF%527DFD09FF52FD13FF52FD16FF525227FD15FFA85252FD1BFFA852A8FD11%FF7D7DFD09FF52A8FD12FF7D7DFD15FF52F87DFD14FF7D277DFD1DFF7D52%FD11FFA827FD09FF52A8FD12FF527DFD15FF5252FD14FF5252FD20FF52A8%FD11FF7DFD09FFA852FD12FFA87DFD15FF5252FD13FF277DFD21FFA827FD%11FF52FD09FF7D7DFD12FFA852FD15FF5252FD12FF527DFD23FF52A8FD10%FF7D7DFD08FFA852FD13FF52FD15FF5252FD11FF2752FD24FF527DFD10FF%7D7DFD09FF52A8FD11FFA852A8FD14FF5252FD10FF527DFD25FFA852FD10%FF7D7DFD09FF52A8FD12FF52FD15FF5252FD0FFF7D52FD26FFA852FD10FF%7DA8FD09FF7D7DFD12FF52A8FD14FF5252FD0FFF52A8FD27FF52FD10FF7D%7DFD09FF52A8FD12FF52FD15FF5252FD0EFF7D52FD11FF7DA8FD14FFA852%FD10FF7D7DFD09FF7D7DFD12FF52A8FD14FF5252FD0EFF27FD10FF7D277D%5252FD13FFA852FD10FF7D7DFD09FF7DA8FD12FF52FD15FF5252FD0DFF7D%52FD0FFF7D27FFFFFF7D52FD12FF52A8FD10FF52A8FD09FF7D7DFD12FF52%A8FD14FF5252FD0DFF7D7DFD0EFF7D52FD05FF52A8FD11FF52A8FD0FFFA8%52FD0AFF52A8FD12FF52FD15FF5252FD0DFF27FD0EFF7D27FD06FF7D52FD%10FF7D52FD11FF52FD0AFF7D7DFD11FFA852A8FD14FF5252FD0CFF7D7DFD%0EFF27FD07FF7D7DFD10FF27FD11FF7D7DFD0AFF52A8FD12FF52FD15FF52%52FD0CFF7D7DFD0DFF527DFD07FFA852FD0FFF277DFD11FF7D7DFD0AFF7D%7DFD11FFA852FD15FF5252FD0CFF7DA8FD0DFF52FD09FF52A8FD0DFF527D%FD12FF52FD0BFF7DA8FD11FFA852FD15FF5252FD0CFF52A8FD0CFFA852FD%09FF527DFD0CFF7D52FD12FFA852FD0BFF52A8FD11FF7D7DFD15FF5252FD%0CFF52FD0DFF52A8FD0AFF27FD0BFF7D52FD13FF7D7DFD0BFF52FD12FF7D%A8FD15FF5252FD0BFFA852FD0DFF52A8FD0AFFA827FD09FF5252FD14FF27%FD0BFFA852FD12FF52FD16FF5252FD0CFF52FD0DFF52FD0CFFA827A8FD04%FFA85227A8FD14FFA852FD0BFFA852FD12FF52FD16FF5252FD0BFFA852FD%0CFF7D7DFD0DFFA8FD045227527DFD16FF527DFD0BFF7D7DFD11FFA852FD%16FF5252FD0CFF52FD0CFFA87DFD10FFA8A8FD18FFA852FD0CFF52A8FD11%FF7D7DFD16FF5252FD0CFF527DFD0BFF7D7DFD2AFF52A8FD0CFF52FD12FF%52A8FD16FF5252FD0CFF7D7DFD0BFFA852FD29FFA852FD0CFFA87DFD12FF%52FD17FF5252FD0CFFA852FD0BFFA852FD29FF52A8FD0CFF7D7DFD11FF7D%7DFD17FF5252FD0DFF52FD0CFF52FD28FF7D52FD0DFF52FD12FF7D7DFD17%FF5252FD0DFF52A8FD0BFF527DFD26FF7D27FD0DFFA852FD12FF27FD18FF%5252FD0DFFA87DFD0BFFA852FD26FF27FD0EFF7D7DFD11FF7D7DFD18FF52%52FD0DFFA852A8FD0BFF527DFD24FF277DFD0EFF27FD12FF52A8FD18FF52%52FD0EFF527DFD0CFF27A8FD22FF527DFD0EFF7D7DFD11FFA852FD19FF52%52FD0EFFA827FD0CFFA827FD21FF5252FD0FFF52A8FD11FF52A8FD19FF52%52FD0FFF52A8FD0CFFA827FD1FFF527DFD0FFFA852FD11FF7D52FD1AFF52%52FD0FFF7D52FD0DFFA827A8FD1BFFA8277DFD10FF27A8FD11FF52A8FD1A%FF5252FD10FF7D7DFD0EFF527DFD19FF7D52FD11FF7D7DFD11FFA852FD1B%FF5252FD11FF27A8FD0EFF7D5252FD14FFA87D527DFD11FFA827A8FD11FF%27A8FD1BFF5252FD12FF27FD10FF7D5252A8FD0FFFA852527DA8FD12FF52%7DFD11FF7D7DFD1CFF5252FD12FF7D27FD11FF7DFD0452FD087DA8FD0452%7DFD14FF7D52FD11FFA827A8FD1CFF5252FD13FF7D27FD13FFA8FD0B7DA8%FD16FF7D27FD12FF527DFD1DFF52F87DFD13FF7D27FD34FFA827FD12FF7D%52FD1EFF5252527DFD13FF7D52FD32FFA827FD12FFA827FD1FFF5252FF27%A8FD13FF5227FD30FF7D27FD13FF27A8FD1FFF5252FFFF27FD14FF7D52FD%2EFF7D27FD13FF527DFD20FF5252FFFFA827FD14FF7D27A8FD2AFFA85252%FD13FF527DFD21FF5252FFFFFF7D52FD15FF5252A8FD27FF7D527DFD13FF%7D52FD22FF5252FD04FF5252FD15FF7D5252A8FD23FF7D2752A8FD13FF7D%27FD23FF5252FD05FF527DFD16FFA852527DFD1FFF7D5252FD15FFA852FD%24FF5252FD06FF527DFD17FF7D5227527DFD19FF7D7D2752A8FD15FFA827%A8FD24FF5252FD06FFA8527DFD19FF7D52527D7DFD12FFA87D7D527D7DFD%17FFA852A8FD25FF5252FD07FFA85252FD1BFF7DFD0652FD047DA87DA87D%A8FD05527D7DFD19FF7D27A8FD26FF5252FD09FF7D52FD1FFFA8A8FD067D%527D7D7DA8FD1DFF5252FD28FF5252FD0AFF7D27FD47FF277DFD29FF5252%FD0BFFA827A8FD44FF527DFD2AFF5252FD0CFFA82752A8FD40FF7D277DFD%2BFF5252FD0EFF7D527DFD3DFFA85252FD2DFF5252FD0FFFA85252FD3BFF%7D527DFD2EFF5252FD11FF7D277DFD38FF5252A8FD2FFF5227FD0F522752%5252F827FD36522727525227FD2E5227%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Deform.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (PlanetX.aip)%AI8_PluginGroupInfo(Adobe Line Plugin Group) (Line artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Sketch Plugin Group) (Sketch artwork) (IdeaFileFormat.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPathBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligraphicBrushTool.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (SwatchLibs.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathfinderS.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.929412 0.87924 0.890196 0.799985 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A0 R0 G0 J 0 j 1 w 4 M []0 d0 XR226.5084 425.44 m227.7161 426.2441 230.6491 427.7919 231.8717 428.5684 C233.2109 429.419 234.6681 430.0838 236.0732 430.8306 c236.24 430.9193 236.4029 431.0151 236.5678 431.1073 c237.5331 431.6473 238.4783 432.2282 239.4695 432.7154 c240.4041 433.1748 241.5189 433.3646 242.317 433.9806 c243.4338 434.8426 244.6496 435.3779 245.9448 435.8229 c246.1639 435.8981 246.3747 436.0039 246.5789 436.1149 c247.5528 436.6446 248.4829 437.2822 249.5052 437.6887 c250.7231 438.173 252.0199 438.4587 253.2799 438.8389 c253.3844 438.8705 253.4641 438.9763 253.564 439.0323 c253.9721 439.2617 254.3603 439.5582 254.7981 439.6976 c256.2887 440.1721 257.7997 440.582 259.2976 441.0341 c259.9851 441.2415 260.6589 441.494 261.3416 441.7177 c261.6808 441.8288 262.0321 441.9046 262.3675 442.0251 c263.0136 442.2573 263.6437 442.5374 264.2977 442.7426 C264.6346 442.8482 265.138 442.7006 265.3448 442.8986 c266.5373 444.0409 268.0367 443.6591 269.4246 443.8334 c269.7747 443.8774 270.1257 443.9531 270.4622 444.059 c271.1049 444.2611 271.7226 444.575 272.3777 444.6966 c273.2329 444.8554 274.3306 444.5786 274.9327 445.0214 c275.7814 445.6454 276.6027 445.6534 277.4961 445.6864 C278.8149 445.7352 280.1358 445.7308 281.4539 445.7915 c281.8312 445.8089 282.2112 445.9465 282.5731 446.0761 c283.0299 446.2396 283.4689 446.6158 283.9167 446.6175 C291.0748 446.6454 298.2331 446.6304 305.3914 446.6137 C305.7434 446.6129 306.2734 446.6324 306.4161 446.4289 c307.0247 445.5606 307.8925 445.7918 308.6956 445.7566 C309.934 445.7022 311.1747 445.6976 312.4131 445.6434 C312.7635 445.6281 313.2988 445.6294 313.4244 445.4243 c313.9403 444.5814 314.7362 444.844 315.4532 444.7503 c316.4732 444.6169 317.4957 444.4879 318.5052 444.2943 c319.0198 444.1956 319.4977 443.9164 320.0101 443.7942 c321.7895 443.3697 323.5995 443.0573 325.3544 442.5517 C327.0503 442.0632 328.6612 441.2634 330.3683 440.8355 C331.7319 440.4936 332.8241 439.2818 334.3849 439.6068 c334.4786 439.6264 334.609 439.4107 334.7382 439.3301 c335.0508 439.1352 335.3525 438.8936 335.6947 438.7805 c336.9374 438.3695 338.2127 438.0519 339.4406 437.603 c340.216 437.3196 340.9381 436.8821 341.6679 436.4839 c342.6245 435.9619 343.5414 435.3618 344.5193 434.8855 C345.4981 434.4087 346.5325 434.0467 347.5376 433.6226 C347.6346 433.5817 347.6819 433.4332 347.7772 433.3761 c348.6523 432.8517 349.5203 432.3132 350.4154 431.8247 c351.4147 431.2792 352.4787 430.844 353.4445 430.2475 C354.7094 429.4662 355.9088 428.5781 357.13 427.7269 C357.5506 427.4337 357.9331 427.0829 358.3661 426.8108 c359.7259 425.9563 361.1416 425.1849 362.4608 424.273 C364.1419 423.111 365.3131 421.3391 367.2429 420.4191 C368.1903 419.9674 368.9383 419.0624 369.7172 418.3019 C370.5387 417.4998 371.2644 416.6001 372.078 415.7894 C372.9692 414.9015 373.9309 414.0847 374.8288 413.2031 C375.6326 412.4139 376.389 411.5766 377.1705 410.7644 c378.0013 409.9008 378.8689 409.0701 379.6609 408.1724 C380.3584 407.382 380.9788 406.5231 381.6238 405.6872 c382.3517 404.7439 383.0914 403.8084 383.7828 402.8388 c384.2206 402.2247 384.5482 401.5326 384.9801 400.9138 C385.9053 399.5881 386.8869 398.3016 387.8039 396.9704 c388.2854 396.2714 388.6739 395.5089 389.114 394.7808 c389.6452 393.902 390.2572 393.0636 390.7043 392.1445 C391.1762 391.1743 391.4909 390.1281 391.8874 389.1203 c391.9261 389.0222 392.0848 388.9763 392.1409 388.8791 c392.6858 387.9365 393.2943 387.0212 393.7384 386.0324 C394.2097 384.9827 394.4712 383.8403 394.9175 382.7775 C395.4415 381.5301 396.1886 380.3652 396.6082 379.0886 C396.9495 378.0505 396.9075 376.9698 397.5119 375.9012 C398.1497 374.7733 397.8516 373.2921 398.4873 371.9252 C399.1901 370.4142 399.1806 368.5058 399.5007 366.7834 C400.1989 363.0249 400.5302 359.1467 400.5115 355.3198 C400.4894 350.8109 399.939 346.3046 399.6159 341.7974 C399.6073 341.6782 399.6156 341.5344 399.5536 341.4459 c398.5466 340.0081 398.805 338.3277 398.6276 336.7299 c398.5977 336.4603 398.5559 336.0471 398.3877 335.9624 c397.5827 335.557 397.8043 334.8325 397.7222 334.1895 C397.6228 333.4102 397.5373 332.624 397.3553 331.8624 C397.2473 331.4104 396.9063 331.0177 396.7715 330.5679 C396.3223 329.0691 395.9198 327.5563 395.4949 326.0501 c395.4744 325.9776 395.399 325.9222 395.3684 325.8506 c394.8457 324.628 394.3199 323.4067 393.8076 322.1797 C393.3345 321.0465 392.9265 319.8831 392.3972 318.7775 C391.9286 317.7986 391.2831 316.9048 390.8063 315.9291 C390.332 314.9587 390.0382 313.898 389.5412 312.9413 C389.018 311.9342 388.3392 311.0087 387.7445 310.0378 c387.2908 309.2971 386.9059 308.5108 386.4129 307.7984 C385.5606 306.5669 384.6475 305.3775 383.7613 304.1694 C383.4136 303.6954 383.0764 303.2135 382.7218 302.7448 C382.195 302.0488 381.6732 301.3482 381.1199 300.6737 c380.3541 299.7402 379.5545 298.8345 378.7817 297.9066 C378.1818 297.1864 377.6412 296.4127 377.0023 295.7301 C375.9451 294.6008 374.8087 293.5459 373.746 292.4215 c372.9404 291.569 372.2817 290.5606 371.405 289.7969 C370.3516 288.8793 369.0712 288.2238 368.0082 287.3154 C366.7804 286.266 365.702 285.0435 364.5185 283.9392 C364.0222 283.476 363.4401 283.0963 362.8667 282.7256 C361.5765 281.8916 360.2479 281.1161 358.9714 280.2623 C357.7191 279.4246 356.5096 278.5225 355.2859 277.6423 C354.8744 277.3463 354.4875 277.0155 354.0698 276.729 c353.6833 276.4637 353.2707 276.2363 352.8695 275.9923 C353.36 275.8317 353.8474 275.6604 354.3429 275.5171 c354.4906 275.4744 354.661 275.5099 354.821 275.5099 C381.54 275.5098 408.2591 275.5096 434.9782 275.5098 C436.802 275.5098 436.8412 275.5462 436.8412 277.4042 C436.8421 346.2818 436.8421 415.1594 436.8411 484.037 C436.841 485.8256 436.8352 485.826 435.0319 485.826 c400.5931 485.8261 366.1543 485.8261 331.7155 485.8259 C297.3167 485.8258 262.9179 485.8257 228.5191 485.8261 c226.5211 485.8261 226.5185 485.8276 226.5184 483.868 c226.5176 467.1086 226.5179 450.3492 226.518 433.5898 C226.518 431.3498 226.4683 399.8328 226.5008 397.5934 c226.5008 397.5934 L227.3705 398.4108 233.5734 402.9513 234.4791 403.7323 c235.2763 404.4197 236.0098 405.182 236.8188 405.8543 c237.6062 406.5086 238.4562 407.0872 239.2742 407.7051 C240.4557 408.5975 241.6073 409.5325 242.8221 410.3766 c243.5139 410.8572 244.3278 411.1581 245.0477 411.603 c245.986 412.1828 246.8672 412.8553 247.808 413.4308 c248.4877 413.8466 249.2085 414.2059 249.9396 414.5247 c250.9501 414.9655 251.9985 415.319 253.0093 415.7592 c253.653 416.0395 254.2589 416.4072 254.88 416.7391 C255.9064 417.2877 256.9305 417.8406 257.958 418.3872 C258.0609 418.4419 258.1817 418.4622 258.2918 418.5048 C259.9349 419.1424 261.5718 419.7969 263.2247 420.4082 c263.6284 420.5575 264.1022 420.5136 264.511 420.6538 c264.9568 420.8067 265.3548 421.0932 265.792 421.2783 c266.1404 421.4257 266.5093 421.5546 266.8814 421.6106 C267.9063 421.765 269.0616 421.3964 269.8437 422.4835 C269.9689 422.6576 270.4473 422.5832 270.7634 422.6134 C271.6154 422.695 272.3855 422.7646 273.2052 423.2936 c273.915 423.7516 275.0687 423.4767 276.005 423.6442 c276.6597 423.7614 277.2724 424.0989 277.9162 424.2979 c278.2905 424.4135 278.6866 424.4892 279.0774 424.5152 C280.5933 424.616 282.1699 424.4535 283.618 424.8141 C290.083 426.424 296.6267 425.7102 303.1086 425.3605 C305.4398 425.2347 307.9551 425.0295 310.2066 424.3599 c311.7543 423.8997 313.5055 424.1109 314.7407 423.393 c316.115 422.5943 317.9278 423.2656 318.9589 421.8298 C318.9966 421.7773 319.1123 421.7379 319.1766 421.7537 C320.7081 422.1305 321.7555 420.8897 323.0807 420.545 C324.3718 420.2091 325.5294 419.378 326.7657 418.8077 c327.765 418.3467 328.8079 417.9796 329.8038 417.5121 C330.2674 417.2945 330.6496 416.91 331.0963 416.6485 C332.8691 415.6107 334.732 414.7049 336.4091 413.5323 C337.9523 412.4533 339.2764 411.0659 340.7403 409.8673 c342.1857 408.6838 343.7492 407.6381 345.1398 406.3964 c346.1285 405.5137 346.9157 404.4054 347.7943 403.399 C348.5596 402.5225 349.3409 401.6597 350.0897 400.7693 C350.9951 399.6928 351.8864 398.6038 352.7582 397.4999 C353.1598 396.9915 353.4256 396.3566 353.8851 395.9171 C354.7316 395.1076 355.5285 394.3297 355.7647 393.0948 c355.8358 392.7231 356.3786 392.4659 356.6079 392.0958 c357.5777 390.5303 358.562 388.9698 359.4381 387.3517 c359.9657 386.3772 360.2763 385.2877 360.7346 384.2725 c361.2838 383.0561 361.8862 381.8638 362.4667 380.6616 C362.4836 380.6266 362.5256 380.6016 362.5363 380.566 C362.9219 379.2906 363.2844 378.0078 363.6938 376.7402 C364.2614 374.9823 364.8763 373.2397 365.4425 371.4814 C365.5753 371.0688 365.5963 370.6198 365.6649 370.1869 C365.8193 369.2125 365.4424 368.0947 366.5162 367.3632 C366.689 367.2455 366.6342 366.7615 366.6459 366.4454 C366.6902 365.2464 366.6769 364.0434 366.7755 362.8493 c366.8105 362.4254 367.1204 362.0291 367.2732 361.6086 C367.4034 361.2503 367.5785 360.8757 367.5796 360.5078 C367.5977 354.2284 367.5997 347.949 367.5718 341.6696 C367.5701 341.287 367.2834 340.9078 367.1406 340.5228 C367.0074 340.1634 366.8099 339.8049 366.7798 339.4347 C366.702 338.4791 366.7187 337.5163 366.6639 336.5583 c366.6183 335.7585 366.8877 334.8553 365.9582 334.3097 c365.8356 334.2377 365.8122 333.9476 365.7945 333.7539 C365.6691 332.3826 365.4892 331.0867 364.8765 329.763 C364.1549 328.2042 364.0829 326.3582 363.5349 324.701 c363.1571 323.5582 362.4303 322.5338 361.8956 321.4388 c361.5005 320.6297 360.9301 319.8136 360.852 318.9627 c360.7099 317.4136 359.7873 316.4131 358.9462 315.2727 C358.3657 314.4857 358.0827 313.4849 357.6141 312.6079 c357.3384 312.0919 357.033 311.5524 356.6131 311.1605 C355.5003 310.1221 355.2227 308.5363 353.9177 307.5533 C352.6535 306.601 351.7865 305.1369 350.6651 303.9747 C349.8465 303.1262 348.8887 302.4134 348.0105 301.6207 C347.1591 300.8522 346.3658 300.0154 345.4801 299.2902 c344.7594 298.7001 343.9414 298.2285 343.1637 297.7086 C342.2332 297.0865 341.3374 296.3992 340.3566 295.8697 C339.4424 295.3762 338.4127 295.1011 337.4774 294.6411 C336.4829 294.152 335.5525 293.534 334.5698 293.0185 c333.7948 292.612 333.0092 292.1948 332.1816 291.926 C330.7446 291.4594 329.2654 291.1246 327.8174 290.6893 C327.3654 290.5534 326.9697 290.2397 326.5252 290.0669 C326.1345 289.9151 325.7159 289.8225 325.3018 289.7458 C324.26 289.5527 323.0483 290.0663 322.2233 288.9298 C322.0936 288.7512 321.6214 288.7995 321.3054 288.7815 c320.1081 288.7131 318.8448 288.8867 317.7231 288.5639 c312.1484 286.9596 306.4794 288.1163 300.8648 287.8351 C298.5089 288.8888 295.8676 288.2895 293.5437 288.9803 C292.1413 289.3972 290.4334 289.1694 289.4638 289.9088 C288.1686 290.8965 286.4414 290.1806 285.4178 291.4446 C285.3745 291.4981 285.2754 291.5111 285.1994 291.5329 C283.6784 291.9701 282.1236 292.3168 280.6467 292.8713 C279.5493 293.2833 278.5726 294.006 277.5054 294.5132 C276.5291 294.9772 275.4843 295.2964 274.5055 295.7558 C273.5911 296.185 272.7041 296.6823 271.8412 297.2089 C270.9867 297.7304 270.159 298.3011 269.3532 298.8957 C268.4807 299.5396 267.6011 300.1864 266.8071 300.921 C265.5726 302.0631 264.3878 303.2611 263.22 304.4722 C262.3099 305.4161 261.4714 306.4287 260.5757 307.387 C259.7809 308.2373 258.8955 309.0087 258.155 309.9019 c257.5999 310.5715 257.2382 311.3975 256.7431 312.1215 c255.8328 313.4524 254.8177 314.7169 253.9822 316.0917 C253.4449 316.9758 253.1637 318.0133 252.7439 318.9716 c252.2037 320.2046 251.6413 321.428 251.0828 322.653 c251.0353 322.7572 250.9083 322.8319 250.8798 322.937 c250.4956 324.3539 250.2331 325.8154 249.7184 327.1822 c249.0746 328.892 249.136 330.8618 248.4491 332.3792 C247.2668 334.9911 248.1319 337.5318 247.7898 340.0664 C249.1423 341.8745 248.3693 344.0742 248.8957 346.0209 c249.2741 347.4201 249.931 348.7435 250.4546 350.1042 C250.5546 350.3641 250.6023 350.6436 250.6918 350.9082 c251.0815 352.0605 251.3384 353.2849 251.9035 354.3445 C252.8054 356.036 253.8073 357.6986 254.9674 359.2207 C255.9549 360.5162 257.227 361.5944 258.3694 362.7725 C259.1204 363.547 259.8031 364.4018 260.6268 365.0881 c261.7538 366.0271 262.5161 367.4264 264.1152 367.8042 C264.5401 367.9045 264.8621 368.4025 265.2544 368.686 c266.5031 369.5885 267.7444 370.5035 269.0266 371.3564 C269.5861 371.7286 270.2291 371.9824 270.8501 372.2535 C271.9561 372.7362 273.0772 373.1842 274.1858 373.661 c274.6702 373.8694 275.1408 374.1104 275.614 374.344 c275.6815 374.3774 275.7189 374.4839 275.7861 374.504 c277.0169 374.874 278.2552 375.2203 279.4805 375.6075 c279.9453 375.7544 280.3846 375.9852 280.8293 376.1914 c280.9682 376.2558 281.0755 376.4161 281.2156 376.4457 c283.2398 376.8724 285.2697 377.2724 287.2927 377.7044 C288.393 377.9394 289.4772 378.4179 290.5784 378.4499 c294.8127 378.5727 299.0559 378.6853 303.2848 378.5206 c304.5563 378.4711 305.7991 377.5238 307.0421 376.959 C307.8534 376.5904 308.6246 376.1311 309.443 375.7808 c311.2257 375.0176 312.4401 373.5701 313.7412 372.2413 C314.9262 371.0312 316.0181 369.7299 317.1508 368.4687 c317.2292 368.3814 317.3652 368.2986 317.3748 368.2037 c317.5052 366.9136 319.002 366.1606 318.7399 364.7214 C320.2323 363.6636 319.0108 361.5327 320.4339 360.4179 C320.6129 360.2777 320.5736 359.8152 320.5768 359.5014 C320.5943 357.8217 320.6112 356.1417 320.5902 354.4622 C320.5807 353.6994 320.7877 352.8598 319.8849 352.3407 c319.6999 352.2344 319.7122 351.7537 319.6676 351.4408 c319.5672 350.7353 319.8408 349.8746 318.8442 349.5567 c318.7962 349.5414 318.7762 349.4196 318.7543 349.3442 C318.0737 347.0037 316.6844 345.147 314.9315 343.4887 C314.3384 342.9276 314.0079 342.0893 313.5566 341.3782 C313.4735 341.2473 313.4119 341.088 313.2975 340.9942 C312.0091 339.9385 310.7617 338.8223 309.3987 337.8723 C308.6197 337.3293 307.6574 337.0407 306.7625 336.6745 C305.3031 336.0773 303.8743 335.2622 302.3529 334.9986 C300.7416 334.7194 298.9754 334.2665 297.4049 335.3939 C297.1572 335.5717 296.8128 335.7081 296.5143 335.7059 C295.1881 335.6958 294.3853 336.4454 293.6388 337.4285 C293.0135 338.2521 292.2069 338.9357 291.5351 339.7275 c291.1958 340.1275 291.0809 340.7718 290.6855 341.0606 C289.2583 342.1032 290.2684 344.1118 288.9665 345.1854 C288.8023 345.3208 288.8176 345.7084 288.8017 345.9822 c288.7669 346.5808 288.6772 347.1947 288.7656 347.7788 c289.1804 350.5196 287.2619 352.0522 285.5881 353.5636 C285.033 354.0648 283.7449 353.7213 282.7998 353.8314 C281.3393 354.0015 280.4537 353.1056 279.5384 352.2036 C278.6836 351.361 277.6319 350.6686 276.956 349.7069 c276.1504 348.5607 274.8354 347.8469 274.4314 346.3226 c274.1652 345.3182 273.3484 344.4646 272.8142 343.5231 c272.6843 343.294 272.6879 342.9858 272.6446 342.7117 c272.525 341.9553 272.5969 341.2326 271.8952 340.5562 c271.483 340.1588 271.6772 339.1212 271.6201 338.37 c271.5673 337.676 271.7393 336.949 270.9788 336.4435 c270.7724 336.3063 270.774 335.7798 270.7677 335.4303 c270.733 333.5111 270.6983 331.591 270.7214 329.6719 c270.7314 328.8407 270.4656 327.8928 271.4462 327.3183 c271.5828 327.2383 271.5657 326.8772 271.5994 326.6433 c271.7171 325.8268 271.6521 325.0897 272.367 324.3049 C272.8512 323.7732 273.0048 322.6711 273.5718 321.9412 c274.1837 321.1534 274.7663 320.3424 275.3946 319.5682 c276.1207 318.6736 276.8347 317.7605 277.6428 316.9434 C278.4489 316.1283 279.3088 315.3413 280.2461 314.6865 C281.6981 313.6722 283.1979 312.7112 284.7505 311.8613 C285.7844 311.2953 286.9515 310.9761 288.0483 310.521 C289.3566 309.978 290.6299 309.3394 291.9651 308.8775 C292.6613 308.6366 293.4708 308.7453 294.2051 308.5856 C294.7733 308.4621 295.2979 308.1486 295.8541 307.9547 c296.1847 307.8394 296.5387 307.7252 296.8825 307.724 C301.8014 307.7067 306.7204 307.7077 311.6394 307.7095 C311.8778 307.7096 312.2309 307.665 312.3365 307.7967 C313.2731 308.9644 314.6141 308.4088 315.76 308.6716 c317.2437 309.0119 318.7428 309.3615 319.9961 310.3195 c320.0861 310.3883 320.2138 310.4093 320.3255 310.4483 C321.63 310.9036 322.9472 311.3264 324.2325 311.8304 C324.6701 312.002 325.118 312.3069 325.4054 312.6731 C326.3737 313.9067 328.3092 313.8141 329.0224 315.3639 C331.0175 315.8092 332.0861 317.5639 333.3967 318.8131 c334.6622 320.0193 336.2518 321.0785 336.9127 322.9556 C337.2627 323.9497 338.2541 324.7113 338.9258 325.6006 C339.5525 326.4305 340.1509 327.2824 340.7404 328.1393 C341.3563 329.0344 341.9486 329.9457 342.5454 330.8538 c342.6089 330.9505 342.6393 331.0709 342.6749 331.1836 c343.1105 332.5626 343.7374 333.8286 344.496 335.0774 C345.1617 336.1733 345.3927 337.5296 345.8435 338.7607 c346.3697 340.1974 346.9397 341.6182 347.4609 343.0566 C347.6083 343.4635 347.6645 343.9057 347.7401 344.3357 C347.8976 345.2306 347.7266 346.1075 348.5099 346.964 c348.9937 347.4931 348.7006 348.7242 348.7747 349.6387 c348.8394 350.437 348.5729 351.3114 349.4483 351.9185 C349.6494 352.058 349.6229 352.591 349.6243 352.9432 c349.6384 356.4624 349.6557 359.982 349.6152 363.5008 c349.61 363.9553 349.2722 364.4024 349.1071 364.8596 C348.9897 365.1847 348.8695 365.515 348.8091 365.8535 C348.5559 367.2708 349.274 368.8938 347.8854 370.0813 C347.7543 370.1935 347.8266 370.5419 347.8015 370.7803 c347.7171 371.5808 347.9346 372.4864 346.9965 372.9891 c346.901 373.0403 346.8927 373.2778 346.8673 373.4327 C346.5883 375.1321 345.8886 376.6335 344.9368 378.0725 C344.3509 378.9582 344.0745 380.0436 343.6058 381.0137 c343.3494 381.5445 343.0299 382.0611 342.656 382.516 C341.4489 383.9846 340.213 385.4298 338.9699 386.8682 c337.9088 388.096 336.8907 389.3724 335.7283 390.4979 c334.538 391.6503 333.204 392.6559 331.917 393.7062 c330.7649 394.6463 329.6436 395.6391 328.4088 396.458 C327.5509 397.027 326.5039 397.3022 325.5789 397.7812 c324.8913 398.1372 324.2749 398.6281 323.6057 399.0232 c323.1775 399.276 322.71 399.4618 322.2617 399.6809 c321.0445 400.2758 319.8278 400.8718 318.6123 401.4703 C318.5434 401.5043 318.4943 401.5867 318.424 401.6087 c317.2579 401.9738 316.0998 402.3707 314.9189 402.6803 C314.0834 402.8994 313.0621 402.5339 312.4987 403.5721 c312.42 403.717 311.9747 403.667 311.6981 403.6998 c310.8677 403.798 309.9062 403.4937 309.3644 404.4798 c309.3226 404.5559 309.1499 404.5676 309.0346 404.5946 C307.6703 404.9137 306.3166 405.2941 304.9386 405.5364 C297.6573 406.8166 290.3065 407.2244 282.9655 406.4855 C281.0608 406.2938 279.1171 405.7977 277.1624 405.5606 c275.8595 405.4026 274.2662 405.3319 273.3844 404.5588 c272.1264 403.4558 270.2969 404.3483 269.308 402.9572 C269.2348 402.8542 269.0184 402.8512 268.8675 402.8053 c267.6269 402.4283 266.3425 402.1535 265.159 401.6441 c264.1811 401.2233 263.3476 400.4796 262.4038 399.9636 C261.5062 399.4728 260.536 399.1167 259.6224 398.6528 C259.101 398.3881 258.621 398.038 258.1362 397.7061 C256.9122 396.8682 255.7049 396.0058 254.4737 395.1787 C253.6998 394.6589 252.8642 394.2276 252.111 393.6812 C250.9033 392.8052 249.7481 391.8573 248.5574 390.9574 c247.4926 390.1526 246.3923 389.3941 245.3402 388.5735 C244.444 387.8745 243.5711 387.1414 242.7297 386.3775 C241.7706 385.5067 240.8231 384.6177 239.9336 383.677 c238.785 382.4623 237.7138 381.1746 236.5805 379.9448 C235.8093 379.108 234.956 378.3458 234.2008 377.4956 C233.6148 376.8357 233.1339 376.0835 232.588 375.3867 c231.8329 374.4228 231.0419 373.4866 230.3018 372.5117 C229.7416 371.7739 229.2082 371.0121 228.7159 370.2277 c228.2584 369.4988 227.8948 368.7101 227.4229 367.9918 c227.3626 367.9001 226.7004 368.0082 226.6575 368.1372 c226.523 368.5407 226.5223 368.9985 226.5215 369.4354 c226.5139 373.6353 226.5169 377.8352 226.5169 382.0351 C226.5168 386.155 226.6222 393.4771 226.5008 397.5934 c226.5089 317.652 l226.5511 306.2604 l226.5436 305.8932 226.5201 305.64 226.52 305.3218 c226.5169 295.9255 226.5158 286.5292 226.5205 277.1329 c226.5213 275.6194 226.6364 275.5115 228.172 275.5104 C233.33 275.5065 238.488 275.5089 243.6459 275.5096 C248.484 275.5103 253.3221 275.5094 258.1602 275.5113 c258.7598 275.5115 259.3691 275.4657 259.9545 275.5609 c260.2306 275.6058 260.4606 275.9341 260.7115 276.134 C260.4796 276.2951 260.266 276.4974 260.0126 276.6101 C259.0223 277.0506 257.9571 277.3589 257.036 277.9105 C255.7414 278.6858 254.5604 279.6485 253.3119 280.5035 C252.3138 281.187 251.2982 281.8462 250.2703 282.4839 c249.5426 282.9354 248.7784 283.328 248.038 283.7597 C247.9133 283.8324 247.8314 283.9756 247.7218 284.0778 C246.8637 284.8787 246.0375 285.718 245.1365 286.4675 C243.7187 287.6469 242.2057 288.7146 240.818 289.9269 C239.8192 290.7995 238.9442 291.8171 238.0409 292.7948 C237.2063 293.6981 236.3924 294.6217 235.5977 295.5602 c234.9095 296.373 234.2623 297.2203 233.5948 298.0507 C232.3264 299.6287 231.032 301.1868 229.8001 302.7928 c229.3525 303.3763 227.0007 305.6242 226.6134 306.2571 c226.5965 275.4806 l436.8419 275.5946 l436.7722 485.8252 l226.3567 485.7837 l226.5084 425.44 LsLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF